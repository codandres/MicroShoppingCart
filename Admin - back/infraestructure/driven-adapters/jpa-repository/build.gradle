//plugins {
//    id 'net.ltgt.apt' version '0.8'
//}


dependencies {
    implementation project(":model")
    implementation project(":jpa-repository-commons")
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'

//    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
//    apt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//    compileOnly 'org.mapstruct:mapstruct:1.3.1.Final'
//    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//    testCompileOnly 'org.mapstruct:mapstruct:1.3.1.Final'
//    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

}


//compileJava {
//    options.annotationProcessorPath = configurations.annotationProcessor
//    options.compilerArgs << "-Amapstruct.defaultComponentModel=spring"
//    options.setAnnotationProcessorPath = file('./build/generated/sources/annotationProcessor/java/main')
//    options.annotationProcessorPath = file('./build/generated/sources/annotationProcessor/java/main')
//    annota
//    compileOptions {
////        annotationProcessorPath './build/generated'
//    }
//}

//tasks.withType(JavaCompile) {
//    options.compilerArgs = [
//            '-Amapstruct.suppressGeneratorTimestamp=true'
//    ]
//    options.annotationProcessorPath({ file("./build/sources/annotationProcessor/java/main") })
//    options.compilerArgs += '-proc:none'
//
//    options.annotationProcessorGeneratedSourcesDirectory = file("${project.buildDir}/generated/source/apt/mappers")


//    options.compilerArgs += [
//            "org.mapstruct:mapstruct-processor:1.3.1.Final"
//    ]
//    aptOptions.processors = [
//            'org.mapstruct:mapstruct-processor:1.3.1.Final',
//    ]
//    aptOptions.processorArgs = [
//            "addSuppressWarningsAnnotation": "true",
//            "querydsl.entityAccessors"     : "true"
//    ]
//    options.annotationProcessorPath = configurations.annotationProcessor

//}

//sourceSets.configureEach { sourceSet ->
//    tasks.named(sourceSet.compileJavaTaskName).configure {
//        options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/annotationProcessor/java/${sourceSet.name}")
//    }
//}
